<?xml version="1.0" encoding="UTF-8"?>  
 <beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.2.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
     <!-- 配置Spring初始化加载的配置文件，常用于加载属性文件 bean 里加lazy-init="true"声明启动时不加载该bean加强应用速度 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/spring/jdbc.properties</value> 
			</list>
		</property>
	</bean>
	
	<!-- 注入数据源 -->
	<bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		 <!--initialSize: 初始化连接--> 
		<property name="initialSize" value="20" />
		<!--maxActive: 最大连接数量--> 
		<property name="maxActive" value="50" />
		<!--maxIdle: 最大空闲连接-->       
		<property name="maxIdle" value="20" />
		<!-- 是否对预处理语句进行池管理 --> 
		<property name="poolPreparedStatements" value="true" />
		<!-- 设置从数据源中返回的连接是否采用自动提交机制 -->
		<property name="defaultAutoCommit" value="false" />  
		<!-- 设置在自动回收超时连接的时候打印连接的超时错误  -->  
<!-- <property name="logAbandoned" value="true"/>  --> 
<!-- 设置自动回收超时连接 -->  
<property name="removeAbandoned"  value="true"/> 
<!-- 自动回收超时时间(以秒数为单位) -->  
 <property name="removeAbandonedTimeout" value="180"/>
<!-- 超时等待时间以毫秒为单位  -->  
<!-- <property name="maxWait" value="100"/>  -->  
 <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>  
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
        <property name="numTestsPerEvictionRun" value="10"/>  
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->  
        <property name="minEvictableIdleTimeMillis" value="10000"/>
          
	</bean>
    
  
  
  
   <bean class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" id="sessionFactory">         
        <property name="dataSource" ref="dataSource"></property>         
        <!-- <property name="packagesToScan" value="zb.com.entity"> </property>  -->
       <property name="annotatedClasses">  
            <list>  
                <value>zb.com.entity.U_Basic</value>  
                 <value>zb.com.entity.U_Service</value>
                 <value>zb.com.entity.T_Dict</value>
                   <value>zb.com.entity.Wx_Access_token</value>
                   <value>zb.com.entity.Sys_Config</value>
                 
                
            </list>  
        </property> 
     
        <property name="hibernateProperties">             
            <props>   
               <!--jdbc.fetch_size是指Hibernate每次从数据库中取出并放到JDBC的Statement中的记录条数。Fetch Size设的越大，读数据库的次数越少，速度越快，
　　　　　　    Fetch Size越小，读数据库的次数越多，速度越慢--> 
          <prop key="jdbc.fetch_size">50 </prop> 

          <!--jdbc.batch_size是指Hibernate批量插入,删除和更新时每次操作的记录数。Batch Size越大，
　　　　　　    批量操作的向数据库发送Sql的次数越少，速度就越快，同样耗用内存就越大--> 
          <prop key="jdbc.batch_size">23 </prop> 
          <!--jdbc.use_scrollable_resultset是否允许Hibernate用JDBC的可滚动的结果集。对分页的结果集。对分页时的设置非常有帮助--> 
          <prop key="jdbc.use_scrollable_resultset">false </prop> 
          <!--connection.useUnicode 连接数据库时是否使用Unicode编码--> 
          <prop key="Connection.useUnicode">true </prop> 

          <!--connection.characterEncoding连接数据库时数据的传输字符集编码方式，最好设置为gbk，用gb2312有的字符不全--> 
          <prop key="connection.characterEncoding">UTF-8 </prop>              
            <prop key="hibernate.dialect">${hibernate.dialect}</prop>                 
        <!--     <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop> -->
            <prop key="javax.persistence.validation.mode">none</prop>
            <prop key="hibernate.hbm2ddl.auto">update</prop> 
            
            
           <!--  Hibernate 3.3 and higher -->  
<!--   
<property name="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</property>
<property name="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory</property>
-->  
<!-- hibernate3.0-3.2 cache config-->  
<!--    
<property name="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheProvider</property>  
-->                
            <prop key="current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>                  
            <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>         
            <!-- 开启二级缓存-->
            <prop key="hibernate.cache.use_second_level_cache">true</prop>         
             <!-- 开启查询二级缓存-->
             <prop key="hibernate.cache.use_query_cache">true</prop>          
             <!-- 启用ehcache缓存框架 --> 
              <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
              
              <!-- 缓存文件的位置 -->
             <prop key="hibernate.cache.provider_configuration_file_resource_path">classpath:config/spring/ehcache.xml</prop>
            <prop key="jdbc.use_scrollable_resultset">false</prop>        
            <!-- <prop key="hibernate.transaction.auto_close_session">false</prop> -->            
            </props>        
         </property>
     </bean> 
   
	<!-- EHCACHE -->
<!-- 	<bean id="defaultCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">    
		<property name="configLocation">    
			<value>classpath:config/spring/ehcache.xml</value>     
		</property>    
	</bean>    
        
	定义ehCache的工厂，并设置所使用的Cache name    
	<bean id="ehCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">    
		<property name="cacheManager">    
			<ref local="defaultCacheManager"/>    
		</property>    
		<property name="cacheName">    
			<value>DEFAULT_CACHE</value>    
		</property>    
	</bean> 
	 -->
   
      

      
    <!-- 配置一个事务管理器 class="org.springframework.orm.hibernate4.HibernateTransactionManager"-->  
       <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

	  <!-- 采用声明式容器管理事务一般只对service层进行处理 -->   
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->   
        <aop:pointcut id="txPointcut" expression="execution(* zb.com.services.*.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>  
        <!-- 
        proxy-target-class="true"
        <aop:advisor pointcut="execution(* com.fangjian.core.platform.service.*.*(..))" advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.fangjian.core.platform.service.*.*(..))" advice-ref="txAdvice"/>
         -->
    </aop:config>
    <!-- 事务通知的规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		  <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
             <tx:method name="do*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
            <tx:method name="put*" propagation="REQUIRED" />  
            <tx:method name="use*" propagation="REQUIRED"/>  
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" /> 
            <tx:method name="query" propagation="REQUIRED" read-only="true" /> 
             
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="*" propagation="REQUIRED" read-only="true" rollback-for="java.lang.Exception"/>  
        </tx:attributes>
	</tx:advice>
	

	<!-- 封装一个hibernate模板（模板设计模式）回掉callback -->  
<!-- 	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> -->
</beans>
